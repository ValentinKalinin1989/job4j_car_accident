package ru.job4j.accident.repository;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;
import ru.job4j.accident.model.Accident;
import ru.job4j.accident.model.AccidentType;
import ru.job4j.accident.model.Rule;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

@Repository
public class AccidentJdbcTemplate {
    private final JdbcTemplate jdbcTemplate;

    public AccidentJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * If the Accident is new(id = null) save it, and sets the id value generated by the database
     * If the Accident is in the database, then updates its fields
     * @param accident - the Accident for save
     * @return - the Accident that was saved(with id, if it was null)
     */
    public Accident save(Accident accident) {
        Long accidentId = accident.getId();
        if (accidentId == null) {
            SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(jdbcTemplate);
            simpleJdbcInsert.withTableName("accident").usingGeneratedKeyColumns("id");
            Map<String, Object> insertParameters = new HashMap<>(4);
            insertParameters.put("name", accident.getName());
            insertParameters.put("text", accident.getText());
            insertParameters.put("address", accident.getAddress());
            insertParameters.put("accident_type_id", accident.getAccidentType().getId());
            accident.setId(simpleJdbcInsert.executeAndReturnKey(insertParameters).longValue());
        } else {
            jdbcTemplate.update("update accident set name = ?, text = ?, address = ?, accident_type_id = ? where id = ?",
                    accident.getName(), accident.getText(), accident.getAddress(), accident.getAccidentType().getId(), accidentId);
        }
        return accident;
    }

    /**
     * delete old links from "accident_rule" table, and set new links
     * @param accident - the Accident for which want to create links
     * @param ruleIds - array of Rule id's
     */
    public void addRulesToAccident(Accident accident, Integer[] ruleIds) {
        Long accidentId = accident.getId();
        jdbcTemplate.update("delete from accident_rule where accident_rule_id = ?",
                accidentId);
        for (Integer ruleId : ruleIds) {
            jdbcTemplate.update("insert into accident_rule(accident_rule_id, rule_accident_id) values ( ?, ?)",
                    accidentId, ruleId);
        }
    }

    /**
     * find all Accidents from DB
     * @return list of Accidents
     */
    public List<Accident> findAll() {

        List<Accident> accidentList = jdbcTemplate.query(
                "select accident.id, accident.name, accident.text, accident.address, accident.accident_type_id, accident_type.name from accident left join accident_type ON accident.accident_type_id = accident_type.id",
                (resultSet, row) -> {
                    Accident accident = new Accident();
                    accident.setId(resultSet.getLong(1));
                    accident.setName(resultSet.getString(2));
                    accident.setText(resultSet.getString(3));
                    accident.setAddress(resultSet.getString(4));
                    AccidentType accidentType = new AccidentType();
                    accidentType.setId(resultSet.getLong(5));
                    accidentType.setName(resultSet.getString(6));
                    accident.setAccidentType(accidentType);
                    return accident;
                });

        for (Accident accident : accidentList) {
            Long accidentId = accident.getId();
            String query = "select rule.id, rule.name from accident_rule left join rule on accident_rule.rule_accident_id = rule.id where accident_rule_id = "
                    + accidentId.toString();
            List<Rule> ruleList = jdbcTemplate.query(
                    query,
                    (resultSet, row) -> {
                        Rule rule = new Rule();
                        rule.setId(resultSet.getLong("id"));
                        rule.setName(resultSet.getString("name"));
                        return rule;
                    }
            );
            accident.setRules(new HashSet<>(ruleList));
        }

        return accidentList;
    }

    /**
     * find all Rules from DB
     * @return list of Rules
     */
    public List<Rule> getAllRule() {
        return jdbcTemplate.query("select id, name from rule", (resultSet, row) -> {
            Rule rule = new Rule();
            rule.setId(resultSet.getLong("id"));
            rule.setName(resultSet.getString("name"));
            return rule;
        });

    }

    /**
     * find all AccidentType from DB
     * @return list of AccidentTypes
     */
    public List<AccidentType> findAllAccidentTypes() {
        return jdbcTemplate.query("select id, name from accident_type",
                (resultSet, row) -> {
                    AccidentType accidentType = new AccidentType();
                    accidentType.setId(resultSet.getLong("id"));
                    accidentType.setName(resultSet.getString("name"));
                    return accidentType;
                });
    }
}
